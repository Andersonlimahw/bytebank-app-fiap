import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { View, Text, ScrollView, TouchableOpacity, Linking } from 'react-native';
import { appVersion } from '../../../utils/appInfo';
import { useTheme, useThemeActions } from '../../theme/theme';
import { BrandSelector } from '../../components/BrandSelector';
import { makeUserStyles } from './UserScreen.styles';
import { Avatar } from '../../components/Avatar';
import { useAuth } from '../../../store/authStore';
import { useI18n } from '../../i18n/I18nProvider';
export const UserScreen = () => {
    const { user } = useAuth();
    const { t, lang, setLang } = useI18n();
    const version = appVersion;
    const theme = useTheme();
    const { toggleMode } = useThemeActions();
    const styles = useMemo(() => makeUserStyles(theme), [theme]);
    const accountNumber = useMemo(() => {
        const id = user?.id || '000000';
        const numeric = id.replace(/\D/g, '').padEnd(8, '0').slice(0, 8);
        return `${numeric.slice(0, 4)}-${numeric.slice(4)}`;
    }, [user?.id]);
    return (_jsxs(ScrollView, { style: styles.container, contentContainerStyle: { paddingBottom: 32 }, children: [_jsx(View, { style: styles.header, children: _jsx(Text, { style: styles.title, children: t('user.myAccount') }) }), _jsx(View, { style: styles.section, children: _jsx(View, { style: styles.card, children: _jsxs(View, { style: styles.avatarRow, children: [_jsx(Avatar, { username: user?.name, size: 56 }), _jsxs(View, { style: styles.nameBlock, children: [_jsx(Text, { style: styles.name, children: user?.name || t('user.userFallback') }), _jsx(Text, { style: styles.sub, children: user?.email || t('user.noEmail') })] })] }) }) }), _jsxs(View, { style: styles.section, children: [_jsx(Text, { style: styles.sectionTitle, children: t('user.info') }), _jsxs(View, { style: styles.card, children: [_jsxs(View, { style: styles.row, children: [_jsx(Text, { style: styles.label, children: t('user.userId') }), _jsx(Text, { style: styles.value, numberOfLines: 1, children: user?.id ?? '-' })] }), _jsx(View, { style: styles.divider }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { style: styles.label, children: t('user.account') }), _jsx(Text, { style: styles.value, children: accountNumber })] }), _jsx(View, { style: styles.divider }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { style: styles.label, children: t('user.appVersion') }), _jsx(Text, { style: styles.value, children: version })] })] })] }), _jsxs(View, { style: styles.section, children: [_jsx(Text, { style: styles.sectionTitle, children: t('user.help') }), _jsxs(View, { style: styles.card, children: [_jsxs(TouchableOpacity, { style: styles.row, onPress: () => Linking.openURL('mailto:suporte@bytebank.app'), children: [_jsx(Text, { style: styles.label, children: t('user.supportContact') }), _jsx(Text, { style: styles.link, children: t('user.sendEmail') })] }), _jsx(View, { style: styles.divider }), _jsxs(TouchableOpacity, { style: styles.row, onPress: () => Linking.openURL('https://bytebank.app/ajuda'), children: [_jsx(Text, { style: styles.label, children: t('user.helpCenter') }), _jsx(Text, { style: styles.link, children: t('user.open') })] }), _jsx(View, { style: styles.divider }), _jsxs(TouchableOpacity, { style: styles.row, onPress: () => Linking.openURL('https://bytebank.app/privacidade'), children: [_jsx(Text, { style: styles.label, children: t('user.privacy') }), _jsx(Text, { style: styles.link, children: t('user.view') })] })] })] }), _jsxs(View, { style: styles.section, children: [_jsx(Text, { style: styles.sectionTitle, children: t('user.appearance') }), _jsxs(View, { style: styles.card, children: [_jsxs(View, { style: styles.row, children: [_jsx(Text, { style: styles.label, children: t('user.theme') }), _jsx(TouchableOpacity, { onPress: toggleMode, children: _jsx(Text, { style: styles.link, children: theme.mode === 'light' ? t('user.light') : t('user.dark') }) })] }), _jsx(View, { style: styles.divider }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { style: styles.label, children: t('user.brand') }), _jsx(BrandSelector, {})] })] })] }), _jsxs(View, { style: styles.section, children: [_jsx(Text, { style: styles.sectionTitle, children: t('user.language') }), _jsx(View, { style: styles.card, children: _jsxs(View, { style: styles.row, children: [_jsx(TouchableOpacity, { onPress: () => setLang('pt'), children: _jsx(Text, { style: [styles.link, { fontWeight: lang === 'pt' ? '700' : '400' }], children: t('user.portugueseBR') }) }), _jsx(TouchableOpacity, { style: { marginLeft: 16 }, onPress: () => setLang('en'), children: _jsx(Text, { style: [styles.link, { fontWeight: lang === 'en' ? '700' : '400' }], children: t('user.english') }) }), _jsx(TouchableOpacity, { style: { marginLeft: 16 }, onPress: () => setLang('es'), children: _jsx(Text, { style: [styles.link, { fontWeight: lang === 'es' ? '700' : '400' }], children: t('user.spanish') }) })] }) })] }), _jsx(View, { style: styles.footer, children: _jsxs(Text, { style: styles.version, children: [theme.logoText, " \u2022 v", version] }) })] }));
};
